name: CI_build

on: [push, pull_request, workflow_dispatch]

jobs:
  
  before_build:
    runs-on: windows-latest
    outputs:
      result: ${{ steps.filter.outputs.result }}
      matrix: ${{ steps.filter.outputs.matrix }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
    - name: Start commit filtering
      id: filter
      run: |
        $allowMaster = $true
        $folders_onejob = "PowerEditor/(Test|(installer/(filesForTesting|functionList)))/"
        $files_nowork = "md|txt|log|ini"

        Write-Output 'matrix={"build_configuration": ["Release", "Debug"], "build_platform": ["x64", "Win32"]}' >> $env:GITHUB_OUTPUT
 
        $isPush = ("${{github.event_name }}" -eq "push") ? $true : $false
        $isPull = !$isPush

        if ($isPush){
          $files_modified = @(git diff --name-only HEAD^1 HEAD)
          $commit_message = "${{ github.event.head_commit.message }}"
        }
        else{
          $files_modified = git diff --name-only ${{ github.event.before }} ${{ github.event.after }}
          $commit_message = "${{ github.event.pull_request.title }}"
        }  
        
        $files_notmached = @($files_modified | Where-Object {$_ -notmatch "\.(xml|$files_nowork)$|$folders_onejob"})
    
        echo $commit_message
        echo $files_modified
        echo $files_notmached

        if ($allowMaster -or $isPull) {

            if (($files_modified.length -gt 0 -and $files_notmached.length -eq 0) -or $commit_message -match "\[force (xml|nowork)\]") {
                if (@($files_modified | Where-Object {$_ -notmatch "\.($files_nowork)$"}).length -eq 0 -or $commit_message -match "\[force nowork\]") {
                    Write-Output "Changed files on this commit don't require any additional tasks.`n"
                    Write-Output "result=OK" >> $env:GITHUB_OUTPUT
                }
                else {
                    Write-Output "XML validation mode`n"
                    if (@($files_modified | Where-Object {$_ -match $folders_onejob}).length -eq 0) {
                        $env:Path = "$env:python_dir;$env:python_dir\Scripts;" + $env:Path
                        python -m pip install requests rfc3987 pywin32 lxml
                        python PowerEditor\Test\xmlValidator\validator_xml.py
                        if ($LastExitCode -eq 0) {
                            Write-Output "`nAll XML files are valid.`n"
                            Write-Output "result=OK" >> $env:GITHUB_OUTPUT
                        }
                        else {
                            Write-Output "`nSome XML files are invalid.`n"
                            $host.SetShouldExit($LastExitCode)
                        }
                    }
                    else {
                      Write-Output "Run only one Win32/Debug job"
                      Write-Output "result=ONEJOB" >> $env:GITHUB_OUTPUT
                      Write-Output 'matrix={"build_configuration": ["Debug"], "build_platform": ["Win32"]}' >> $env:GITHUB_OUTPUT
                    }
        
                }
            }
            elseif ($commit_message -match "\[force onejob\]") {
              Write-Output "Run only one Win32/Debug job"
              Write-Output "result=ONEJOB" >> $env:GITHUB_OUTPUT
              Write-Output 'matrix={"build_configuration": ["Debug"], "build_platform": ["Win32"]}' >> $env:GITHUB_OUTPUT
            }
            else{
              Write-Output "Run standard jobs"
            }
        }
        else{
          Write-Output "Run standard jobs"
        }

  matrix:
    needs: before_build
    if: needs.before_build.outputs.result == '' || needs.before_build.outputs.result == 'ONEJOB'
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.before_build.outputs.matrix) }} 
    steps:
    - name: Build x64 / Release
      if: matrix.build_platform == 'x64' && matrix.build_configuration == 'Release'
      run: |
        echo ${{ matrix.build_platform}} / ${{ matrix.build_configuration}}
    - name: Build x64 / Debug
      if: matrix.build_platform == 'x64' && matrix.build_configuration == 'Debug'
      run: |
        echo ${{ matrix.build_platform}} / ${{ matrix.build_configuration}}
    - name: Build Win32 / Release
      if: matrix.build_platform == 'Win32' && matrix.build_configuration == 'Release'
      run: |
        echo ${{ matrix.build_platform}} / ${{ matrix.build_configuration}}
    - name: Build Win32 / Debug
      if: matrix.build_platform == 'Win32' && matrix.build_configuration == 'Debug'
      run: |
        echo ${{ matrix.build_platform}} / ${{ matrix.build_configuration}}

  windows:
    needs: before_build
    if: needs.before_build.outputs.result == ''
    runs-on: windows-latest

    steps:
    #- name: Checkout repo
      #uses: actions/checkout@v4
    - name: Start widnow job
      run: |
        echo "Hellow World"
        echo "${{ needs.before_build.outputs.result }}"

  gcc:
    needs: before_build
    if: needs.before_build.outputs.result == ''
    runs-on: windows-latest

    steps:
    #- name: Checkout repo
      #uses: actions/checkout@v4
    - name: Start gcc job
      run: |
        echo "Hellow World"
        echo "${{ needs.before_build.outputs.result }}"
