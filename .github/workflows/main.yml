name: CI_build

on: [push, pull_request]

jobs:
  
  before_build:
  
    runs-on: windows-latest
    outputs:
      result: ${{ steps.filter.outputs.result }}
      matrix: ${{ steps.filter.outputs.matrix }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
    - name: Commmit filtering
      id: filter
      run: |
        $allowMaster = $true
        $folders_onejob = "PowerEditor/(Test|(installer/(filesForTesting|functionList)))/"
        $files_nowork = "md|txt|log|ini"

        $matrix_all = 'matrix={"build_configuration": ["Release", "Debug"], "build_platform": ["x64", "Win32"]}'
        $matrix_onejob = 'matrix={"build_configuration": ["Debug"], "build_platform": ["Win32"]}'
        Write-Output $matrix_all >> $env:GITHUB_OUTPUT
 
        $isPush = "${{github.event_name }}" -eq "push" ? $true : $false
        $isMaster = $isPush -and $${{ github.ref_name == github.event.repository.master_branch }}

        echo $isPush
        echo $isMaster
        
        if ($isPush) {
          $commit_message = "${{ github.event.head_commit.message }}"
        }
        else {
          $last_commit = @(Invoke-RestMethod ${{ github.event.pull_request._links.commits.href }})[0]  | Select-Object -Last 1
          $commit_message = $last_commit.commit.message
          #$commit_message = "${{ github.event.pull_request.title }}"
        }

        $commit_title = ($commit_message -split "[\r\n]+")[0]
        $files_modified = @(git diff --name-only HEAD~1)
        $files_notmached = @($files_modified | Where-Object {$_ -notmatch "\.(xml|$files_nowork)$|$folders_onejob"})
    
        echo $commit_message
        echo $commit_title
        echo $files_modified
        echo $files_notmached  

        if ($allowMaster -or !$isMaster) {
            if ($commit_title -match "\[force all\]") {
              Write-Output "Run standard jobs"
            }
            elseif ($commit_title -match "\[force one\]") {
              Write-Output "Run only one Win32/Debug job"
              Write-Output "result=ONEJOB" >> $env:GITHUB_OUTPUT
              Write-Output $matrix_onejob >> $env:GITHUB_OUTPUT
            } 
            elseif (($files_modified.length -gt 0 -and $files_notmached.length -eq 0) -or $commit_title -match "\[force (xml|none)\]") {
                if (@($files_modified | Where-Object {$_ -notmatch "\.($files_nowork)$"}).length -eq 0 -or $commit_title -match "\[force none\]") {
                    Write-Output "Changed files on this commit don't require any additional tasks.`n"
                    Write-Output "result=OK" >> $env:GITHUB_OUTPUT
                }
                else {
                    Write-Output "XML validation mode`n"
                    if (@($files_modified | Where-Object {$_ -match $folders_onejob}).length -eq 0) {
                        $env:Path = "$env:python_dir;$env:python_dir\Scripts;" + $env:Path
                        python -m pip install requests rfc3987 pywin32 lxml
                        python PowerEditor\Test\xmlValidator\validator_xml.py
                        if ($LastExitCode -eq 0) {
                            Write-Output "`nAll XML files are valid.`n"
                            Write-Output "result=OK" >> $env:GITHUB_OUTPUT
                        }
                        else {
                            Write-Output "`nSome XML files are invalid.`n"
                            $host.SetShouldExit($LastExitCode)
                        }
                    }
                    else {
                      Write-Output "Run only one Win32/Debug job"
                      Write-Output "result=ONEJOB" >> $env:GITHUB_OUTPUT
                      Write-Output $matrix_onejob >> $env:GITHUB_OUTPUT
                    }
        
                }
            }
            else {
              Write-Output "Run standard jobs"
            }
        }
        else {
          Write-Output "Run standard jobs"
        }

  matrix:
  
    needs: before_build
    if: needs.before_build.outputs.result == '' || needs.before_build.outputs.result == 'ONEJOB'
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.before_build.outputs.matrix) }} 
    
    steps:
    - name: Build x64 / Release
      if: matrix.build_platform == 'x64' && matrix.build_configuration == 'Release'
      run: |
        echo ${{ matrix.build_platform}} / ${{ matrix.build_configuration}}
    - name: Build x64 / Debug
      if: matrix.build_platform == 'x64' && matrix.build_configuration == 'Debug'
      run: |
        echo ${{ matrix.build_platform}} / ${{ matrix.build_configuration}}
    - name: Build Win32 / Release
      if: matrix.build_platform == 'Win32' && matrix.build_configuration == 'Release'
      run: |
        echo ${{ matrix.build_platform}} / ${{ matrix.build_configuration}}
    - name: Build Win32 / Debug
      if: matrix.build_platform == 'Win32' && matrix.build_configuration == 'Debug'
      run: |
        echo ${{ matrix.build_platform}} / ${{ matrix.build_configuration}}

  windows:
    needs: before_build
    if: needs.before_build.outputs.result == ''
    runs-on: windows-latest

    steps:
    #- name: Checkout repo
      #uses: actions/checkout@v4
    - name: Start widnow job
      run: |
        echo "Hellow World"
        echo "${{ needs.before_build.outputs.result }}"

  gcc:
    needs: before_build
    if: needs.before_build.outputs.result == ''
    runs-on: windows-latest

    steps:
    #- name: Checkout repo
      #uses: actions/checkout@v4
    - name: Start gcc job
      run: |
        echo "Hellow World"
        echo "${{ needs.before_build.outputs.result }}"


  build_windows_msys2:

    runs-on: windows-latest
    needs: before_build
    if: needs.before_build.outputs.result == ''
    env:
      MSYS2_ALLOW_UPDATE: true 
      MSYS2_ALLOW_CACHE: true
    
    strategy:
      fail-fast: false
      matrix:
        build_configuration: [Release]
        #build_configuration: [Release, Debug]
        build_platform: [x86_64, i686]

    steps:
    #- name: Checkout repo
      #uses: actions/checkout@v4

    - name: Setup MSYS2
      run: |
        Write-host "${{ matrix.build_platform }}"
        Write-host "${{ matrix.build_configuration }}"
        $Env:Path = 'C:\msys64\usr\bin' + [IO.Path]::PathSeparator + $Env:Path
        if ( $${{ matrix.build_platform == 'i686'}} ) {$Env:MSYSTEM = 'MINGW32'; Write-Output "MSYSTEM=$Env:MSYSTEM" >> $env:GITHUB_ENV}
        if ( $${{ matrix.build_platform == 'i686'}} ) {$Env:Path = 'C:\msys64\mingw32\bin' + [IO.Path]::PathSeparator + $Env:Path; Write-Output "Path=$Env:Path" >> $env:GITHUB_ENV}
        if ( $${{ matrix.build_platform == 'x86_64'}} ) {$Env:MSYSTEM = 'MINGW64'; Write-Output "MSYSTEM=$Env:MSYSTEM" >> $env:GITHUB_ENV}
        if ( $${{ matrix.build_platform == 'x86_64'}} ) {$Env:Path = 'C:\msys64\mingw64\bin' + [IO.Path]::PathSeparator + $Env:Path; Write-Output "Path=$Env:Path" >> $env:GITHUB_ENV}
        if ( $${{ matrix.build_configuration == 'Debug'}} ) {$Env:DEBUG = '1'}

        Write-Output $Env:Path
        Write-Output $Env:MSYSTEM
        echo "===1"
        Write-Output "${{ env.MSYSTEM }}"
        
        Add-MpPreference -ExclusionPath "C:\msys64"

        bash -lc "pacman -v"

        Write-Output (where.exe mingw32-make)
        
        if ($Env:MSYS2_ALLOW_UPDATE -eq "true") {
          Write-Output "Update MSYS2 and MAKE"

          $GCC_new = (bash -lc "pacman -Ss mingw-w64-i686-gcc") | Select-String -Pattern "-gcc (.*) \(" | %{$_.Matches.Groups[1].value}
          $MAKE_new = (bash -lc "pacman -Ss mingw-w64-i686-make") | Select-String -Pattern "-make (.*) \(" | %{$_.Matches.Groups[1].value}

          $MAKE_new2 = (bash -lc "pacman -Ss make") | Select-String -Pattern "-make (.*) \(" | %{$_.Matches.Groups[1].value}

          Write-Output "GCC_new=$GCC_new" >> $env:GITHUB_ENV
          Write-Output "MAKE_new=$MAKE_new" >> $env:GITHUB_ENV

          #Write-Output (bash -lc "pacman -Ss mingw-w64-i686-gcc")
          #Write-Output (bash -lc "pacman -Ss mingw-w64-i686-make")
  
          #Write-Output (bash -lc "pacman -Ss mingw-w64-i686-gcc") | Select-String -Pattern '-gcc (.*) \(' | %{$_.Matches.Groups[1].value}
          #Write-Output (bash -lc "pacman -Ss mingw-w64-i686-make") | Select-String -Pattern '-make (.*) \(' | %{$_.Matches.Groups[1].value}
  
          Write-Output $GCC_new
          Write-Output $MAKE_new
          Write-Output $MAKE_new2
  
          Write-Output $MSYS2_ALLOW_UPDATE
          Write-Output $MSYS2_ALLOW_CACHE
  
          Write-Output $Env:MSYS2_ALLOW_UPDATE
          Write-Output $Env:MSYS2_ALLOW_CACHE 
  
          if ($MSYS2_ALLOW_UPDATE){echo "update OK"}
          if ($MSYS2_ALLOW_CACHE){echo "cache OK"}
  
          if ($Env:MSYS2_ALLOW_UPDATE){echo "update OK 2"}
          if ($Env:MSYS2_ALLOW_CACHE){echo "cache OK 2"}

        }


    #- name: Update MSYS2
      #run: |
        #bash -lc "pacman --noconfirm -Syuu"
        #bash -lc "pacman --noconfirm -Syuu"
        #if ( $${{ matrix.build_platform == 'i686'}} ) {bash -lc "pacman --noconfirm -S make"}
        #if ( $${{ matrix.build_platform == 'x86_64'}} ) {bash -lc "pacman --noconfirm -S make"}
    
    - name: Cache MSYS2
      if: ${{ env.MSYS2_ALLOW_UPDATE == 'true' && env.MSYS2_ALLOW_CACHE == 'true'}}
      #run: |
       #echo "Test"
      id: cache-msys2
      uses: actions/cache@v4
      with:
        #path: ${{ matrix.build_platform == 'i686' && 'C:\msys64\mingw32\bin' || 'C:\msys64\mingw64\bin' }}
        path: 'C:\msys64.7z'
        #path: |
          #'C:\msys64\usr'
          #${{ matrix.build_platform == 'i686' && 'C:\msys64\mingw32\bin' || 'C:\msys64\mingw64\bin' }}
        key: ${{ runner.os }}-MSYS2-${{ matrix.build_platform }}-GCC_${{ env.GCC_new }}-MAKE_${{ env.MAKE_new }}

    - name: Check MSYS2 tools version
      run: |
        Write-Output "Tools version:"
        Write-Output (((gcc --version) | select-object -first 1) + " " + (gcc -dumpmachine))
        Write-Output (make --version) | select-object -first 1
        Write-Output (sh --version) | select-object -first 1

        Write-Output (where.exe gcc)
        Write-Output (where.exe make)
        Write-Output (where.exe sh)
    
    - name: Update MSYS2
      if: ${{ env.MSYS2_ALLOW_UPDATE == 'true' && (env.MSYS2_ALLOW_CACHE == 'false' || steps.cache-msys2.outputs.cache-hit != 'true') }}
      run: |
        echo $GCC_new
        echo $MAKE_new
        echo "===1"
        echo $Env:GCC_new
        echo $Env:MAKE_new
        echo "===2"
        echo "${{ env.GCC_new }}"
        echo "${{ env.MAKE_new }}"
        echo "===3"
        echo $Env:MSYSTEM
        echo "===4"
        Write-Output "${{ env.MSYSTEM }}"
        echo "===5"
        echo $Env:Path
        echo "===6"
        Write-Output "${{ env.Path }}"
        echo "===7"

        bash -lc "pacman --noconfirm -Syuu"
        bash -lc "pacman --noconfirm -Syuu"
        if ( $${{ matrix.build_platform == 'i686'}} ) {bash -lc "pacman --noconfirm -S mingw-w64-i686-gcc mingw-w64-i686-make"}
        if ( $${{ matrix.build_platform == 'x86_64'}} ) {bash -lc "pacman --noconfirm -S mingw-w64-x86_64-gcc mingw-w64-x86_64-make"}
      
        Write-Output "Tools version:"
        Write-Output (((gcc --version) | select-object -first 1) + " " + (gcc -dumpmachine))
        Write-Output (make --version) | select-object -first 1
        Write-Output (sh --version) | select-object -first 1

    - name: Pack or unpack MSYS2
      if: ${{ env.MSYS2_ALLOW_UPDATE == 'true' && env.MSYS2_ALLOW_CACHE == 'true'}}
      run: |
        if ($${{ steps.cache-msys2.outputs.cache-hit != 'true' }}){
          Write-Output "Pack msys64"
          7z a 'C:\msys64.7z' 'C:\msys64\usr' ${{ matrix.build_platform == 'i686' && 'C:\msys64\mingw32\bin' || 'C:\msys64\mingw64\bin' }} -y
        }
        else{
          Write-Output "Unpack msys64"
          7z x 'C:\msys64.7z' -oC:\msys64
        }

    #- name: Make n++ exe
      #working-directory: .\
      #run: |

        #Write-Output "Tools version:"
        #Write-Output (((gcc --version) | select-object -first 1) + " " + (gcc -dumpmachine))
        #Write-Output (make --version) | select-object -first 1
        #Write-Output (sh --version) | select-object -first 1
        #Write-Output ""
        #bash -lc "pacman --noconfirm -Syuu"
        #bash -lc "pacman --noconfirm -Syuu"
        #if ( $${{ matrix.build_platform == 'i686'}} ) {bash -lc "pacman --noconfirm -S mingw-w64-i686-gcc mingw-w64-i686-make"}
        #if ( $${{ matrix.build_platform == 'x86_64'}} ) {bash -lc "pacman --noconfirm -S mingw-w64-x86_64-gcc mingw-w64-x86_64-make"}
        #make -f PowerEditor\gcc\makefile
