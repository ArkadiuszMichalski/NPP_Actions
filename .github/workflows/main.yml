name: CI_build

on: [push, pull_request, workflow_dispatch]

jobs:
  
  filter_commit:
    runs-on: windows-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
    - name: Start commit filtering
      run: |
        $allowMaster = $true
        $folders_onejob = "PowerEditor/(Test|(installer/(filesForTesting|functionList)))/"
        $files_nowork = "md|txt|log|ini"

        $isPush = ("${{github.event_name }}" -eq "push") ? $true : $false
        $isPull = !$isPush

        if ($isPush){
          $files_modified = @(git diff --name-only HEAD^1 HEAD)
          $commit_message = "${{ github.event.head_commit.message }}"
        }
        else{
          $files_modified = git diff --name-only ${{ github.event.before }} ${{ github.event.after }}
          $commit_message = "${{ github.event.pull_request.title }}"
        }  
        
        $files_notmached = @($files_modified | Where-Object {$_ -notmatch "\.(xml|$files_nowork)$|$folders_onejob"})

        echo $commit_message
        echo $files_modified
        echo $files_notmached

        if ($allowMaster -or $isPull) {

            if (($files_modified.length -gt 0 -and $files_notmached.length -eq 0) -or $commit_message -match "\[force (xml|nowork)\]") {
                if (@($files_modified | Where-Object {$_ -notmatch "\.($files_nowork)$"}).length -eq 0 -or $commit_message -match "\[force nowork\]") {
                    Write-Output "Changed files on this commit don't require any additional tasks.`n"
                    Exit 0
                }
                else {
                    Write-Output "XML validation mode`n"
                    if (@($files_modified | Where-Object {$_ -match $folders_onejob}).length -eq 0) {
                        $env:Path = "$env:python_dir;$env:python_dir\Scripts;" + $env:Path
                        python -m pip install requests rfc3987 pywin32 lxml
                        python PowerEditor\Test\xmlValidator\validator_xml.py
                        if ($LastExitCode -eq 0) {
                            Write-Output "`nAll XML files are valid.`n"
                            Exit 0
                        }
                        else {
                            Write-Output "`nSome XML files are invalid.`n"
                            $host.SetShouldExit($LastExitCode)
                        }
                    }
        
                }
            }
            elseif ($commit_message -match "\[xml\]" -and $commit_message -notmatch "\[force compile\]") {
                throw "Changed files on this commit require full build."
            }
        }
        else{
          Write-Output "Run standard process without commit filtration"
        }

      
        #echo "Hellow World"
        #throw "Changed files on this commit require full build."

  windows:
    needs: filter_commit
    runs-on: windows-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Start widnow job
      run: |
        echo "Hellow World"

  gcc:
    needs: filter_commit
    runs-on: windows-latest

    steps:
    - name: Start gcc job
      uses: actions/checkout@v4
    - name: Start XML validation
      run: |
        echo "Hellow World"
